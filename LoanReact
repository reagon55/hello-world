Form.js
import React, { useState } from 'react';
import DynamicInput from './DynamicInput';

const config = [
  { name: 'fullName', label: 'Full Name', type: 'text' },
  { name: 'email', label: 'Email', type: 'email' },
  { name: 'gender', label: 'Gender', type: 'select', options: ['Male', 'Female'] }
];

const Form = () => {
  const [formData, setFormData] = useState({ fullName: '', email: '', gender: '' });
  const [errors, setErrors] = useState({});
  const [touched, setTouched] = useState({});
  const [isSubmitted, setIsSubmitted] = useState(false);

  const validate = () => {
    const newErrors = {};
    if (!formData.fullName.trim()) newErrors.fullName = 'Full Name is required';
    if (!formData.email.includes('@')) newErrors.email = 'Valid email is required';
    if (!formData.gender) newErrors.gender = 'Gender is required';
    return newErrors;
  };

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleBlur = (e) => {
    setTouched({ ...touched, [e.target.name]: true });
    const newErrors = validate();
    setErrors(newErrors);
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    const newErrors = validate();
    setErrors(newErrors);
    setTouched({ fullName: true, email: true, gender: true });

    if (Object.keys(newErrors).length === 0) {
      const res = await fetch('http://localhost:4000/formData', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(formData)
      });
      if (res.ok) alert('Form submitted successfully');
      else alert('Submission failed');
      setIsSubmitted(true);
    }
  };

  const isFormValid = Object.keys(validate()).length === 0;

  return (
    <form onSubmit={handleSubmit}>
      {config.map((field) => (
        <DynamicInput
          key={field.name}
          config={field}
          value={formData[field.name]}
          onChange={handleChange}
          onBlur={handleBlur}
          error={errors[field.name]}
          touched={touched[field.name]}
        />
      ))}
      <button type="submit" disabled={!isFormValid}>Submit</button>
    </form>
  );
};

export default Form;

=========================================================================
import React, { useState, useEffect } from 'react';
import LoanForm from './components/LoanForm';
import LoanList from './components/LoanList';

function App() {
  const [loans, setLoans] = useState([]);
  const [loan, setLoan] = useState({ customer: '', amount: '', interestRate: '' });
  const [editLoan, setEditLoan] = useState(null);
  const [filters, setFilters] = useState({ customer: '' });

  // Handle form submission for add or update
  const handleSubmit = (e) => {
    e.preventDefault();
    if (editLoan) {
      const updatedLoans = loans.map((l) =>
        l.id === editLoan.id ? { ...loan, id: editLoan.id } : l
      );
      setLoans(updatedLoans);
      setEditLoan(null);
    } else {
      const newLoan = { ...loan, id: Date.now() };
      setLoans([...loans, newLoan]);
    }
    setLoan({ customer: '', amount: '', interestRate: '' });
  };

  // When editLoan changes, update the form state
  useEffect(() => {
    if (editLoan) {
      setLoan(editLoan);
    }
  }, [editLoan]);

  const handleDelete = (id) => {
    const updatedLoans = loans.filter((l) => l.id !== id);
    setLoans(updatedLoans);
  };

  return (
    <div>
      <h2>Welcome to Loan Management</h2>
      <LoanForm
        loan={loan}
        setLoan={setLoan}
        handleSubmit={handleSubmit}
        editLoan={editLoan}
      />
      <LoanList
        loans={loans}
        deleteLoan={handleDelete}
        setEditLoan={setEditLoan}
        filters={filters}
        setFilters={setFilters}
      />
    </div>
  );
}

export default App;

==================================================================
import React from 'react';

const LoanForm = ({ loan, setLoan, handleSubmit, editLoan }) => {
  const handleChange = (e) => {
    setLoan({ ...loan, [e.target.name]: e.target.value });
  };

  return (
    <div>
      <h2>{editLoan ? 'Edit Loan' : 'Add Loan'}</h2>
      <form onSubmit={handleSubmit}>
        <div>
          <label htmlFor="customer">Customer</label>
          <input
            id="customer"
            name="customer"
            type="text"
            value={loan.customer}
            onChange={handleChange}
          />
        </div>

        <div>
          <label htmlFor="amount">Amount</label>
          <input
            id="amount"
            name="amount"
            type="number"
            value={loan.amount}
            onChange={handleChange}
          />
        </div>

        <div>
          <label htmlFor="interestRate">Interest Rate</label>
          <input
            id="interestRate"
            name="interestRate"
            type="number"
            value={loan.interestRate}
            onChange={handleChange}
          />
        </div>

        <button
          type="submit"
          disabled={!(loan.customer && loan.amount && loan.interestRate)}
        >
          {editLoan ? 'Update Loan' : 'Add Loan'}
        </button>
      </form>
    </div>
  );
};

export default LoanForm;

============================================
import React from 'react';

const LoanList = ({ loans, deleteLoan, setEditLoan, filters, setFilters }) => {
  const handleFilterChange = (e) => {
    setFilters({ ...filters, customer: e.target.value });
  };

  const filteredLoans = loans.filter((loan) =>
    loan.customer.toLowerCase().includes(filters.customer.toLowerCase())
  );

  return (
    <div>
      <label htmlFor="customer">Filter by Customer</label>
      <input
        type="text"
        id="customer"
        value={filters.customer}
        onChange={handleFilterChange}
      />

      <h2>Loan List</h2>
      <ul>
        {filteredLoans.length > 0 ? (
          filteredLoans.map((loan) => (
            <li key={loan.id}>
              <strong>Customer:</strong> {loan.customer},{" "}
              <strong>Amount:</strong> {loan.amount},{" "}
              <strong>Interest Rate:</strong> {loan.interestRate}
              <button onClick={() => setEditLoan(loan)}>Edit</button>
              <button onClick={() => deleteLoan(loan.id)}>Delete</button>
            </li>
          ))
        ) : (
          <li>No loans found</li>
        )}
      </ul>
    </div>
  );
};

export default LoanList;
