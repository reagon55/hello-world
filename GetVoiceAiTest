package com.lgi.cmsa.tests.services.voiceai;

import com.lgi.cmsa.annotations.Service;
import com.lgi.cmsa.constants.Services;
import com.lgi.cmsa.test.common.mocks.VoiceAiMock;
import com.lgi.cmsa.clients.services.VoiceAiServiceClient;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;
import lombok.extern.slf4j.Slf4j;

import static org.apache.http.HttpStatus.SC_OK;
import static org.testng.Assert.assertEquals;

@Slf4j
public class GetVoiceAiTest {

    private MockedUser mockedUser;
    private static final String xRequestId = RandomizerUtils.getRandomXRequestId();
    private static final String widgets = "Widgets";

    @BeforeClass(alwaysRun = true)
    public void beforeVoiceAiTest() {
        mockedUser = new UserMocker().mock();
        new ServiceClientFactory(mockedUser).getVoiceAiClient().getAll();
    }

    @Test(groups = {SMOKE}, description = "MSA-10615")
    @Service(name = Services.VOICE_AI)
    public void testGetVoiceAiEndpoint() {
        new ServiceClientFactory(mockedUser)
            .getVoiceAiClient()
            .getVoiceAiEndpoint()
            .withRequestId(xRequestId)
            .checkStatus(SC_OK);

        List<AvailableWidget> actualCards = new ServiceClientFactory(mockedUser)
            .getVoiceAiClient()
            .getAll()
            .withRequestId(xRequestId)
            .getBodyAsObject(AvailableWidgetsList.class)
            .getCards();

        log.info(String.format("Actual cards from Voice AI: %s", actualCards));

        Assertions.assertThat(actualCards)
            .usingRecursiveComparison()
            .isEqualTo(expectedCards);
    }
}
