Creating a complete microservice example is beyond the scope of a single response, as it would require a full code implementation. However, I can provide you with a simplified code structure and explanation for a sample microservice that includes a Client package for making external API calls.

In this example, we'll create a microservice that fetches weather data from an external weather API.

Project Structure:

lua
Copy code
my-weather-service/
|-- src/
|   |-- main/
|   |   |-- java/
|   |   |   |-- com.example.weather/
|   |   |   |   |-- WeatherServiceApplication.java
|   |   |   |   |-- controller/
|   |   |   |   |   |-- WeatherController.java
|   |   |   |   |-- service/
|   |   |   |   |   |-- WeatherService.java
|   |   |   |   |   |-- client/
|   |   |   |   |   |   |-- WeatherApiClient.java
|   |   |   |   |-- model/
|   |   |   |   |   |-- WeatherData.java
|-- src/
|   |-- test/
|   |   |-- java/
|   |   |   |-- com.example.weather/
|   |   |   |   |-- controller/
|   |   |   |   |   |-- WeatherControllerTest.java
|   |   |   |   |-- service/
|   |   |   |   |   |-- WeatherServiceTest.java
|   |   |   |   |   |-- client/
|   |   |   |   |   |   |-- WeatherApiClientTest.java
|-- pom.xml
|-- application.properties
WeatherServiceApplication.java (Main Class):

java
Copy code
@SpringBootApplication
public class WeatherServiceApplication {
    public static void main(String[] args) {
        SpringApplication.run(WeatherServiceApplication.class, args);
    }
}
WeatherData.java (Model):

java
Copy code
public class WeatherData {
    private String city;
    private String temperature;
    // Getters and setters
}
WeatherApiClient.java (Client Package):

This class is responsible for making external API requests to fetch weather data.

java
Copy code
@Service
public class WeatherApiClient {
    private final RestTemplate restTemplate;

    @Autowired
    public WeatherApiClient(RestTemplate restTemplate) {
        this.restTemplate = restTemplate;
    }

    public WeatherData fetchWeatherData(String city) {
        // Make an HTTP request to an external weather API and parse the response
        ResponseEntity<WeatherData> response = restTemplate.exchange(
            "https://api.example.com/weather?city=" + city,
            HttpMethod.GET,
            null,
            WeatherData.class
        );
        return response.getBody();
    }
}
WeatherService.java (Service):

java
Copy code
@Service
public class WeatherService {
    private final WeatherApiClient weatherApiClient;

    @Autowired
    public WeatherService(WeatherApiClient weatherApiClient) {
        this.weatherApiClient = weatherApiClient;
    }

    public WeatherData getWeather(String city) {
        return weatherApiClient.fetchWeatherData(city);
    }
}
WeatherController.java (Controller):

java
Copy code
@RestController
@RequestMapping("/weather")
public class WeatherController {
    private final WeatherService weatherService;

    @Autowired
    public WeatherController(WeatherService weatherService) {
        this.weatherService = weatherService;
    }

    @GetMapping("/{city}")
    public WeatherData getWeather(@PathVariable String city) {
        return weatherService.getWeather(city);
    }
}
application.properties:

properties
Copy code
# Configuration properties for your microservice, such as server port, API keys, etc.
This example demonstrates a simplified microservice that fetches weather data from an external API. The WeatherApiClient class in the Client package is responsible for making external API requests, while the WeatherService class handles the business logic. The WeatherController provides REST endpoints for clients to access the weather data.

You would need to configure your external API endpoint and implement proper error handling, authentication, and security measures as per your requirements in a production application.