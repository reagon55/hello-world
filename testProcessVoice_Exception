package com.lgi.voiceai.test.controller;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.multipart;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertEquals;

import com.lgi.msa.voiceai.service.VoiceAiService;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.mock.web.MockMultipartFile;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;

@SpringBootTest
@AutoConfigureMockMvc
public class VoiceAiControllerComponentTest {

    @Autowired
    private MockMvc mockMvc;

    @MockBean
    private VoiceAiService voiceAiService;

    @BeforeEach
    void setUp() {
        MockitoAnnotations.openMocks(this);
    }

    @Test
    public void testProcessVoice_Success() throws Exception {
        MockMultipartFile file = new MockMultipartFile(
                "file",
                "test.wav",
                MediaType.MULTIPART_FORM_DATA_VALUE,
                "test data".getBytes()
        );

        when(voiceAiService.processVoice(any())).thenReturn("cp");

        mockMvc.perform(multipart("/voice-input")
                .file(file)
                .contentType(MediaType.MULTIPART_FORM_DATA))
                .andExpect(status().isOk());
                // Add additional expectations here, like jsonPath() if needed
    }

    @Test
    public void testProcessVoice_Exception() throws Exception {
        MockMultipartFile file = new MockMultipartFile(
            "file", "test.wav", MediaType.MULTIPART_FORM_DATA_VALUE, "test data".getBytes());

        when(voiceAiService.processVoice(any())).thenThrow(new RuntimeException("Processing error"));

        mockMvc.perform(multipart("/voice-input")
                .file(file)
                .contentType(MediaType.MULTIPART_FORM_DATA))
                .andExpect(status().isInternalServerError())
                .andExpect(result -> assertTrue(result.getResolvedException() instanceof RuntimeException))
                .andExpect(result -> assertEquals("Processing error", result.getResolvedException().getMessage()));
    }
}
