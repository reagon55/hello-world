unit test

@ExtendWith(MockitoExtension.class)
class ResponseBuilderServiceTest {

    @InjectMocks
    private ResponseBuilderService responseBuilderService;

    @Mock
    private SDIDProfileService sdidProfileService;

    @BeforeEach
    void wirePrivates() {
        // if sdidProfileService is a private field, inject it
        ReflectionTestUtils.setField(responseBuilderService, "sdidProfileService", sdidProfileService);
    }

    @Test
    void enrichResponse_SDID_withTMX_callsService_setsStatus_andMovesState() {
        // given
        IdentityResolverResponse response = new IdentityResolverResponse();
        JourneyConfiguration config = new JourneyConfiguration();
        JourneyState journeyState = new JourneyState(config, new HashMap<>());

        List<String> eligibleAuthenticators = new ArrayList<>();
        String userCredentialStore = "userCredentialStore";
        String linkedCustomerId   = "linked-123";
        Map<String, String> headerMap = Map.of("correlationId", "cid-1");
        String credentialId = "cred-1";
        String partition    = "p1";
        String tmxProfileId = "tmx-42";

        SDIDStatusResponse sdid = new SDIDStatusResponse();
        // use whatever your type is: enum or String
        // e.g., sdid.setSdidStatus(SDIDStatus.ELIGIBLE);
        sdid.setSdidStatus("ELIGIBLE");

        when(sdidProfileService.getSDIDStatus(headerMap, userCredentialStore, linkedCustomerId, tmxProfileId))
                .thenReturn(sdid);

        // when
        // IMPORTANT: keep the arg ORDER exactly as your method defines it.
        responseBuilderService.enrichResponse(
                journeyState,
                eligibleAuthenticators,
                userCredentialStore,
                response,
                linkedCustomerId,
                headerMap,
                credentialId,
                partition,
                tmxProfileId
        );

        // then
        assertEquals("ELIGIBLE", response.getSdidStatus()); // or SDIDStatus.ELIGIBLE
        assertEquals(StateEnum.AWAITING_SDID, journeyState.getJourneyState());
        verify(sdidProfileService, times(1))
                .getSDIDStatus(headerMap, userCredentialStore, linkedCustomerId, tmxProfileId);
    }

    @Test
    void enrichResponse_SDID_withoutTMX_doesNotCallService() {
        // given
        IdentityResolverResponse response = new IdentityResolverResponse();
        JourneyState journeyState = new JourneyState(new JourneyConfiguration(), new HashMap<>());

        // when
        responseBuilderService.enrichResponse(
                journeyState,
                new ArrayList<>(),
                "userCredentialStore",
                response,
                "linked-123",
                Map.of("correlationId", "cid-1"),
                "cred-1",
                "p1",
                null // TMX missing
        );

        // then
        verifyNoInteractions(sdidProfileService);
        // (optional) assert that sdidStatus not set and state not switched
        assertNull(response.getSdidStatus());
        // or assert the state remains whatever it was before this branch
    }
}

-----------------------------------------------
unit test

@ExtendWith(MockitoExtension.class)
class SDIDProxyServiceTest {

    @Mock RestTemplate restTemplate;
    @Mock CapiSDIDProperties capiSDIDProperties;
    @Mock CapiSDIDProperties.Operations ops;

    SDIDProxyService sdidProxyService;

    Map<String, String> headerMap;

    final String baseUrl = "http://mock-capi";
    final String endpointTpl = "/sdid/customers/{customerInformationSystem}/{customerId}/devices/strong-device-id";

    final String cis   = "ocis";       // customerInformationSystem
    final String cust  = "12345xyz";   // customerId
    final String tmx   = "tmx-abc-123";

    @BeforeEach
    void setUp() {
        sdidProxyService = new SDIDProxyService(restTemplate, capiSDIDProperties, new ErrorConfig());
        headerMap = new HashMap<>();
        headerMap.put("x-lbg-txn-correlation-id", "corr");
        headerMap.put("x-lbg-session-id", "sess");
        headerMap.put("x-lbg-brand", "LTB");

        when(capiSDIDProperties.getBaseUrl()).thenReturn(baseUrl);
        when(capiSDIDProperties.getOperations()).thenReturn(ops);
        when(ops.getSdidStatusEndpoint()).thenReturn(endpointTpl);
    }

    @Test
    void testGetSDIDStatus_Success() {
        // Arrange expected URI (same way as code)
        URI expectedUri = UriComponentsBuilder
                .fromHttpUrl(baseUrl + endpointTpl)
                .queryParam("tmxProfileId", tmx)
                .build(cis, cust);

        SDIDStatusResponse body = new SDIDStatusResponse();
        body.setSdidStatus(SDIDStatus.BOUND);  // or AVAILABLE_TO_BIND / BLOCKED
        ResponseEntity<SDIDStatusResponse> entity = new ResponseEntity<>(body, HttpStatus.OK);

        when(restTemplate.exchange(
                eq(expectedUri),
                eq(HttpMethod.GET),
                any(HttpEntity.class),
                eq(SDIDStatusResponse.class)
        )).thenReturn(entity);

        // Act
        SDIDStatusResponse result = sdidProxyService.getSDIDStatus(headerMap, cis, cust, tmx);

        // Assert
        assertNotNull(result);
        assertEquals(SDIDStatus.BOUND, result.getSdidStatus());
    }

    @Test
    void testGetSDIDStatus_Non2xx_ThrowsServiceException() {
        URI expectedUri = UriComponentsBuilder
                .fromHttpUrl(baseUrl + endpointTpl)
                .queryParam("tmxProfileId", tmx)
                .build(cis, cust);

        ResponseEntity<SDIDStatusResponse> non2xx =
                new ResponseEntity<>(null, HttpStatus.BAD_REQUEST);

        when(restTemplate.exchange(
                eq(expectedUri),
                eq(HttpMethod.GET),
                any(HttpEntity.class),
                eq(SDIDStatusResponse.class)
        )).thenReturn(non2xx);

        assertThrows(ServiceException.class,
                () -> sdidProxyService.getSDIDStatus(headerMap, cis, cust, tmx));
    }
}

---------------------------------------------------------------------------------------------
sdid
package com.lbg.iau.ssi.coordinator.identity.resolver.service;

import com.lbg.iau.ssi.coordinator.identity.resolver.config.CapiSDIDProperties;
import com.lbg.iau.ssi.coordinator.identity.resolver.exception.ErrorConfig;
import com.lbg.iau.ssi.coordinator.identity.resolver.model.SDIDStatusResponse;
import com.lbg.iau.ssi.coordinator.identity.resolver.util.LoggerManager;
import lombok.RequiredArgsConstructor;
import org.slf4j.Logger;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.http.HttpMethod;
import org.springframework.http.ResponseEntity;
import org.springframework.http.HttpEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.client.HttpStatusCodeException;
import org.springframework.web.client.ResourceAccessException;
import org.springframework.web.client.RestTemplate;

import java.util.Map;

import static com.lbg.iau.ssi.coordinator.identity.resolver.constant.Constants.*;

@Service
@RequiredArgsConstructor
public class SDIDProxyService {

    private static final Logger LOGGER = LoggerManager.getApplicationLogger(SDIDProxyService.class);

    @Qualifier(BEAN_CAPI_SDID_STATUS_REST_TEMPLATE)
    private final RestTemplate sdidRestTemplate;

    private final CapiSDIDProperties capiSDIDProperties;
    private final ErrorConfig errorConfig;

    public SDIDStatusResponse getDeviceStatus(Map<String, String> headerMap, String deviceId) {
        HttpEntity<Void> requestEntity = new HttpEntity<>(buildCapiHeaders(headerMap));
        try {
            LOGGER.info(headerMap, () -> String.format("Calling SDID CAPI for deviceId %s", deviceId));

            ResponseEntity<SDIDStatusResponse> response = sdidRestTemplate.exchange(
                    capiSDIDProperties.getOperations().getGetDeviceStatusById(),
                    HttpMethod.GET,
                    requestEntity,
                    SDIDStatusResponse.class,
                    deviceId
            );

            if (response.getStatusCode().is2xxSuccessful() && response.getBody() != null) {
                LOGGER.info(headerMap, () -> "Successfully retrieved SDID status.");
                return response.getBody();
            }

            LOGGER.warn(headerMap, () -> "Non-200 response from SDID CAPI");
            throw new ServiceException(errorConfig.generateError(IAU_SSI_COORDINATOR_IDENTITY_RESOLVER_ERR_650.name()));

        } catch (HttpStatusCodeException ex) {
            LOGGER.warn(headerMap, () -> "SDID CAPI returned error: " + ex.getStatusCode());
            throw new ServiceException(errorConfig.generateError(IAU_SSI_COORDINATOR_IDENTITY_RESOLVER_ERR_651.name()));
        } catch (ResourceAccessException ex) {
            LOGGER.error(headerMap, () -> "Unable to reach SDID CAPI", ex);
            throw new ServiceException(errorConfig.generateError(IAU_SSI_COORDINATOR_IDENTITY_RESOLVER_ERR_652.name()));
        }
    }
}
