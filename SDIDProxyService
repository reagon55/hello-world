package com.lbg.iau.ssi.coordinator.identity.resolver.service;

import com.lbg.iau.resolver.contract.model.SDIDStatus;
import com.lbg.iau.ssi.coordinator.identity.resolver.exception.ServiceException;
import com.lbg.iau.ssi.coordinator.identity.resolver.model.SDIDStatusResponse;
import com.lbg.iau.ssi.coordinator.identity.resolver.properties.CapiSDIDProperties;
import com.lbg.sca.logger.ApplicationLogger;
import com.lbg.sca.logger.LoggerManager;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.HttpStatusCodeException;
import org.springframework.web.client.ResourceAccessException;
import org.springframework.web.client.RestTemplate;

import java.util.Map;

import static com.lbg.iau.ssi.coordinator.identity.resolver.UserIdentityResolverConstants.ENTRY_LOG;
import static com.lbg.iau.ssi.coordinator.identity.resolver.exception.ErrorCode.IAU_SSI_COORDINATOR_IDENTITY_RESOLVER_ERR_647;
import static com.lbg.iau.ssi.coordinator.identity.resolver.exception.ErrorCode.IAU_SSI_COORDINATOR_IDENTITY_RESOLVER_ERR_648;
import static com.lbg.iau.ssi.coordinator.identity.resolver.util.CommonUtil.buildCapiHeaders;
import static com.lbg.iau.ssi.coordinator.identity.resolver.util.Constants.BEAN_CAPI_SDID_REST_TEMPLATE;


---------------------------------------------------------------------------------------------------------------------------
@Service
@RequiredArgsConstructor
public class SDIDProxyService {

    private static final ApplicationLogger LOGGER =
        LoggerManager.getApplicationLogger(SDIDProxyService.class);

    private final RestTemplate sdidRestTemplate;

    private final SDIDProperties sdidProperties;

    private final ErrorConfig errorConfig;

    public SDIDStatusResponse getSDIDStatus(Map<String, String> headerMap, String sdid) {
        LOGGER.info(headerMap, () -> "Calling SDID status CAPI");

        HttpEntity<String> requestEntity = new HttpEntity<>(null, buildHeaders(headerMap));
        try {
            ResponseEntity<SDIDStatusResponse> response = sdidRestTemplate.exchange(
                sdidProperties.getOperations().getGetStatusURL(sdid),
                HttpMethod.GET,
                requestEntity,
                SDIDStatusResponse.class
            );

            if (response.getStatusCode().is2xxSuccessful() && response.getBody() != null) {
                return response.getBody();
            } else {
                LOGGER.warn(headerMap, () -> "SDID CAPI returned non-2xx or null body");
                throw new ServiceException(
                    errorConfig.generateError("IAU_SSI_COORDINATOR_IDENTITY_RESOLVER_ERR_SOME_CODE")
                );
            }

        } catch (HttpStatusCodeException ex) {
            LOGGER.error(headerMap, () -> "HTTP error from SDID CAPI: " + ex.getStatusCode(), ex);
            throw new ServiceException(
                errorConfig.generateError("IAU_SSI_COORDINATOR_IDENTITY_RESOLVER_ERR_SOME_CODE")
            );
        } catch (ResourceAccessException ex) {
            LOGGER.error(headerMap, () -> "Timeout accessing SDID CAPI", ex);
            throw new ServiceException(
                errorConfig.generateError("IAU_SSI_COORDINATOR_IDENTITY_RESOLVER_ERR_SOME_CODE")
            );
        }
    }

    private HttpHeaders buildHeaders(Map<String, String> headerMap) {
        HttpHeaders headers = new HttpHeaders();
        headers.setAll(headerMap);
        return headers;
    }
}

