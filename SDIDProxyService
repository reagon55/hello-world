Optional: Null Case (if needed)

@Test
void testGetSDIDStatus_NullResponse() {
    SDIDStatusResponse mockResponse = new SDIDStatusResponse();
    mockResponse.setSdidStatus(null);

    ResponseEntity<SDIDStatusResponse> mockEntity = new ResponseEntity<>(mockResponse, HttpStatus.OK);

    when(restTemplate.exchange(
            eq(baseUrl + "/" + sdid),
            eq(HttpMethod.GET),
            any(HttpEntity.class),
            eq(SDIDStatusResponse.class)
    )).thenReturn(mockEntity);

    SDIDStatusResponse result = sdidProxyService.getSDIDStatus(headerMap, sdid);

    assertNotNull(result);
    assertNull(result.getSdidStatus()); // Only if nulls are allowed
}


---------------------------------------------------------------------------------------------------------------------------
Edge Case (AVAILABLE_TO_BIND)

@Test
void testGetSDIDStatus_AvailableToBind() {
    SDIDStatusResponse mockResponse = new SDIDStatusResponse();
    mockResponse.setSdidStatus(SDIDStatus.AVAILABLE_TO_BIND);

    ResponseEntity<SDIDStatusResponse> mockEntity = new ResponseEntity<>(mockResponse, HttpStatus.OK);

    when(restTemplate.exchange(
            eq(baseUrl + "/" + sdid),
            eq(HttpMethod.GET),
            any(HttpEntity.class),
            eq(SDIDStatusResponse.class)
    )).thenReturn(mockEntity);

    SDIDStatusResponse result = sdidProxyService.getSDIDStatus(headerMap, sdid);

    assertNotNull(result);
    assertEquals(SDIDStatus.AVAILABLE_TO_BIND, result.getSdidStatus());
}

-----------------------------------------------------------------------------------------------------------------------------------
Negative Case (BLOCKED)
@Test
void testGetSDIDStatus_Blocked() {
    SDIDStatusResponse mockResponse = new SDIDStatusResponse();
    mockResponse.setSdidStatus(SDIDStatus.BLOCKED);

    ResponseEntity<SDIDStatusResponse> mockEntity = new ResponseEntity<>(mockResponse, HttpStatus.OK);

    when(restTemplate.exchange(
            eq(baseUrl + "/" + sdid),
            eq(HttpMethod.GET),
            any(HttpEntity.class),
            eq(SDIDStatusResponse.class)
    )).thenReturn(mockEntity);

    SDIDStatusResponse result = sdidProxyService.getSDIDStatus(headerMap, sdid);

    assertNotNull(result);
    assertEquals(SDIDStatus.BLOCKED, result.getSdidStatus());
}

--------------------------------------------------------------------------------------
package com.lbg.iau.ssi.coordinator.identity.resolver.proxy;

import com.lbg.iau.ssi.coordinator.identity.resolver.model.SDIDStatus;
import com.lbg.iau.ssi.coordinator.identity.resolver.model.SDIDStatusResponse;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;
import org.springframework.http.*;
import org.springframework.web.client.RestTemplate;

import java.util.HashMap;
import java.util.Map;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class SDIDProxyServiceTest {

    @InjectMocks
    private SDIDProxyService sdidProxyService;

    @Mock
    private RestTemplate restTemplate;

    private Map<String, String> headerMap;
    private String sdid;
    private String baseUrl = "http://mock-capi/sdid/status"; // you can override this manually

    @BeforeEach
    void setUp() {
        headerMap = new HashMap<>();
        headerMap.put("Authorization", "Bearer dummy-token");
        sdid = "sample-sdid";

        // Inject the URL manually if @Value doesn't work
        sdidProxyService.sdidStatusUrl = baseUrl;
    }

    @Test
    void testGetSDIDStatus_Success() {
        // Prepare mock response
        SDIDStatusResponse mockResponse = new SDIDStatusResponse();
        mockResponse.setSdidStatus(SDIDStatus.ENABLED);

        ResponseEntity<SDIDStatusResponse> mockEntity = new ResponseEntity<>(mockResponse, HttpStatus.OK);

        // Mocking RestTemplate call
        when(restTemplate.exchange(
                eq(baseUrl + "/" + sdid),
                eq(HttpMethod.GET),
                any(HttpEntity.class),
                eq(SDIDStatusResponse.class)
        )).thenReturn(mockEntity);

        // Call the method
        SDIDStatusResponse result = sdidProxyService.getSDIDStatus(headerMap, sdid);

        // Assert
        assertNotNull(result);
        assertEquals(SDIDStatus.ENABLED, result.getSdidStatus());
    }
}

--------------------------------------------------------------------------------------------------------
CapiSDIDProperties.java

import jakarta.annotation.PostConstruct;
import lombok.Data;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.annotation.Configuration;

import java.io.Serializable;

@Data
@Configuration
@ConfigurationProperties(prefix = "services.capi.sdid-status")
public class CapiSDIDProperties implements Serializable {

    private String baseUrl;
    private Operations operations;

    @Data
    public static class Operations implements Serializable {
        private String sdidStatusEndpoint;
    }

    @PostConstruct
    public void validateProperties() {
        if (baseUrl == null || operations == null || operations.getSdidStatusEndpoint() == null) {
            throw new IllegalStateException("CapiSDIDProperties is not properly configured");
        }
    }
}
------------------------------------------------------------------------------------------------------------------------------------------
package com.lbg.iau.ssi.coordinator.identity.resolver.service;

import com.lbg.iau.resolver.contract.model.SDIDStatus;
import com.lbg.iau.ssi.coordinator.identity.resolver.exception.ServiceException;
import com.lbg.iau.ssi.coordinator.identity.resolver.model.SDIDStatusResponse;
import com.lbg.iau.ssi.coordinator.identity.resolver.properties.CapiSDIDProperties;
import com.lbg.sca.logger.ApplicationLogger;
import com.lbg.sca.logger.LoggerManager;
import lombok.RequiredArgsConstructor;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.HttpStatusCodeException;
import org.springframework.web.client.ResourceAccessException;
import org.springframework.web.client.RestTemplate;

import java.util.Map;

import static com.lbg.iau.ssi.coordinator.identity.resolver.UserIdentityResolverConstants.ENTRY_LOG;
import static com.lbg.iau.ssi.coordinator.identity.resolver.exception.ErrorCode.IAU_SSI_COORDINATOR_IDENTITY_RESOLVER_ERR_647;
import static com.lbg.iau.ssi.coordinator.identity.resolver.exception.ErrorCode.IAU_SSI_COORDINATOR_IDENTITY_RESOLVER_ERR_648;
import static com.lbg.iau.ssi.coordinator.identity.resolver.util.CommonUtil.buildCapiHeaders;
import static com.lbg.iau.ssi.coordinator.identity.resolver.util.Constants.BEAN_CAPI_SDID_REST_TEMPLATE;


---------------------------------------------------------------------------------------------------------------------------
@Service
@RequiredArgsConstructor
public class SDIDProxyService {

    private static final ApplicationLogger LOGGER =
        LoggerManager.getApplicationLogger(SDIDProxyService.class);

    private final RestTemplate sdidRestTemplate;

    private final SDIDProperties sdidProperties;

    private final ErrorConfig errorConfig;

    public SDIDStatusResponse getSDIDStatus(Map<String, String> headerMap, String sdid) {
        LOGGER.info(headerMap, () -> "Calling SDID status CAPI");

        HttpEntity<String> requestEntity = new HttpEntity<>(null, buildHeaders(headerMap));
        try {
            ResponseEntity<SDIDStatusResponse> response = sdidRestTemplate.exchange(
                sdidProperties.getOperations().getGetStatusURL(sdid),
                HttpMethod.GET,
                requestEntity,
                SDIDStatusResponse.class
            );

            if (response.getStatusCode().is2xxSuccessful() && response.getBody() != null) {
                return response.getBody();
            } else {
                LOGGER.warn(headerMap, () -> "SDID CAPI returned non-2xx or null body");
                throw new ServiceException(
                    errorConfig.generateError("IAU_SSI_COORDINATOR_IDENTITY_RESOLVER_ERR_SOME_CODE")
                );
            }

        } catch (HttpStatusCodeException ex) {
            LOGGER.error(headerMap, () -> "HTTP error from SDID CAPI: " + ex.getStatusCode(), ex);
            throw new ServiceException(
                errorConfig.generateError("IAU_SSI_COORDINATOR_IDENTITY_RESOLVER_ERR_SOME_CODE")
            );
        } catch (ResourceAccessException ex) {
            LOGGER.error(headerMap, () -> "Timeout accessing SDID CAPI", ex);
            throw new ServiceException(
                errorConfig.generateError("IAU_SSI_COORDINATOR_IDENTITY_RESOLVER_ERR_SOME_CODE")
            );
        }
    }

    private HttpHeaders buildHeaders(Map<String, String> headerMap) {
        HttpHeaders headers = new HttpHeaders();
        headers.setAll(headerMap);
        return headers;
    }
}

