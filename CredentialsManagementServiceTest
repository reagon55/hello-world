// üîÅ UPDATE package to match your test folder
package com.lbg.j.iau.ssi.coordinator.identity.resolver.service;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.springframework.http.HttpMethod.GET;
import static org.springframework.http.MediaType.APPLICATION_JSON;

import com.fasterxml.jackson.databind.ObjectMapper;

// ‚úÖ project imports (these names match what you showed)
import com.lbg.j.iau.ssi.coordinator.identity.resolver.exception.CoordinatorException;
import com.lbg.j.iau.ssi.coordinator.identity.resolver.model.IdentityStoreResponse;
import com.lbg.j.iau.ssi.coordinator.identity.resolver.props.CapiCredentialMgmtProperties;
import com.lbg.j.iau.ssi.coordinator.identity.resolver.util.Constants;
import com.lbg.j.iau.ssi.coordinator.identity.resolver.util.TestUtils;
import com.lbg.platform.spring.rest.LbgRestTemplate;

import java.net.URI;
import java.util.Map;
import java.util.TreeMap;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.http.HttpStatus;
import org.springframework.test.web.client.ExpectedCount;
import org.springframework.test.web.client.MockRestServiceServer;

import static org.springframework.test.web.client.match.MockRestRequestMatchers.*;
import static org.springframework.test.web.client.response.MockRestResponseCreators.*;

/**
 * Tests for CredentialsManagementService.retrieveCredentialsByUsername(...)
 * Mirrors existing test style in the project.
 */
class CredentialsManagementServiceTest {

    private static final ObjectMapper MAPPER = new ObjectMapper();

    // Build URL same way as service: baseUrl + operation path
    private static final String BASE_URL = "http://localhost:8080";
    private static final String OP_PATH  = "/credentials/ida/identifierPartition/credentialId";
    private static final String IDENTITY_STORE_URI = BASE_URL + OP_PATH;

    private CredentialsManagementService service;
    private LbgRestTemplate lbgRestTemplate;
    private MockRestServiceServer mockServer;
    private CapiCredentialMgmtProperties props;
    private final Map<String, String> headerMap = new TreeMap<>(String.CASE_INSENSITIVE_ORDER);

    @BeforeEach
    void setUp() {
        // same helpers used elsewhere in your tests
        lbgRestTemplate = new LbgRestTemplate(TestUtils.getErrorUtil());
        mockServer = MockRestServiceServer.createServer(lbgRestTemplate.getRestTemplate());

        props = new CapiCredentialMgmtProperties();
        props.setBaseUrl(BASE_URL);
        props.setRegChannelVersion("test");
        props.getOperations().setGetCredentialsByUsername(OP_PATH);

        service = new CredentialsManagementService(lbgRestTemplate, props, TestUtils.getErrorUtil());

        headerMap.putAll(TestUtils.createValidHeader().toSingleValueMap());
    }

    // ---------- 1) Happy path ----------
    @Test
    void retrieveCredentialsByUsername_HappyPath() throws Exception {
        IdentityStoreResponse body = TestUtils.createIdentityStoreResponse();
        // ensure not revoked
        if (Constants.CAPI_CREDENTIAL_MGMT_PASSWORDSTATUS_REVOKED.equals(body.getPasswordStatus())) {
            body.setPasswordStatus("ACTIVE");
        }
        String json = MAPPER.writeValueAsString(body);

        mockServer.expect(ExpectedCount.once(), requestTo(new URI(IDENTITY_STORE_URI)))
                  .andExpect(method(GET))
                  .andExpect(header(Constants.REG_CHANNEL_VERSION, "test"))
                  .andRespond(withSuccess(json, APPLICATION_JSON));

        IdentityStoreResponse out = service.retrieveCredentialsByUsername(
                headerMap, "ida", "identifierPartition", "credentialId");

        assertThat(out).isNotNull();
        assertThat(out.getLinkedCustomerId()).isEqualTo(body.getLinkedCustomerId());
        mockServer.verify();
    }

    // ---------- 2) Password revoked -> throws specific CoordinatorException ----------
    @Test
    void retrieveCredentialsByUsername_PasswordRevoked_Throws() throws Exception {
        // build a small JSON body setting the revoked status constant
        String revokedJson = String.format("""
            { "passwordStatus": "%s", "linkedCustomerId": "X" }
            """, Constants.CAPI_CREDENTIAL_MGMT_PASSWORDSTATUS_REVOKED);

        mockServer.expect(ExpectedCount.once(), requestTo(new URI(IDENTITY_STORE_URI)))
                  .andExpect(method(GET))
                  .andRespond(withSuccess(revokedJson, APPLICATION_JSON));

        assertThatThrownBy(() ->
                service.retrieveCredentialsByUsername(headerMap, "ida", "identifierPartition", "credentialId"))
            .isInstanceOf(CoordinatorException.class)
            // your service throws with this error id for revoked status
            .hasMessageContaining("IAU_SSI_COORDINATOR_IDENTITY_RESOLVER_ERR_648");

        mockServer.verify();
    }

    // ---------- 3) 404 Not Found -> mapped CoordinatorException with Error payload ----------
    @Test
    void retrieveCredentialsByUsername_NotFound_MapsToCoordinatorException() throws Exception {
        String errBody = MAPPER.writeValueAsString(TestUtils.getErrorResponse());

        mockServer.expect(ExpectedCount.once(), requestTo(new URI(IDENTITY_STORE_URI)))
                  .andExpect(method(GET))
                  .andRespond(withStatus(HttpStatus.NOT_FOUND)
                          .contentType(APPLICATION_JSON)
                          .body(errBody));

        assertThatThrownBy(() ->
                service.retrieveCredentialsByUsername(headerMap, "ida", "identifierPartition", "credentialId"))
            .isInstanceOf(CoordinatorException.class)
            .satisfies(ex -> {
                var ce = (CoordinatorException) ex;
                assertThat(ce.getError())
                    .hasFieldOrPropertyWithValue("type", "ERROR")
                    // codes/messages/actions depend on your TestUtils/error mapping;
                    // keep these generic checks if values vary across envs:
                    .hasFieldOrProperty("code")
                    .hasFieldOrProperty("message")
                    .hasFieldOrProperty("action");
            });

        mockServer.verify();
    }

    // ---------- 4) 403 Forbidden (or any 4xx you map) -> CoordinatorException ----------
    @Test
    void retrieveCredentialsByUsername_Forbidden_MapsToCoordinatorException() throws Exception {
        mockServer.expect(ExpectedCount.once(), requestTo(new URI(IDENTITY_STORE_URI)))
                  .andExpect(method(GET))
                  .andRespond(withStatus(HttpStatus.FORBIDDEN));

        assertThatThrownBy(() ->
                service.retrieveCredentialsByUsername(headerMap, "ida", "identifierPartition", "credentialId"))
            .isInstanceOf(CoordinatorException.class);

        mockServer.verify();
    }

    // ---------- (Optional) 5) 500 from downstream ----------
    @Test
    void retrieveCredentialsByUsername_InternalServerError_MapsToCoordinatorException() throws Exception {
        mockServer.expect(ExpectedCount.once(), requestTo(new URI(IDENTITY_STORE_URI)))
                  .andExpect(method(GET))
                  .andRespond(withStatus(HttpStatus.INTERNAL_SERVER_ERROR));

        assertThatThrownBy(() ->
                service.retrieveCredentialsByUsername(headerMap, "ida", "identifierPartition", "credentialId"))
            .isInstanceOf(CoordinatorException.class);

        mockServer.verify();
    }

    // ---------- (Optional) 6) RestTemplate throws RuntimeException ----------
    @Test
    void retrieveCredentialsByUsername_RestTemplateRuntime_MapsToCoordinatorException() throws Exception {
        // Simulate a low-level error by responding with malformed JSON (causing deserialization crash)
        mockServer.expect(ExpectedCount.once(), requestTo(new URI(IDENTITY_STORE_URI)))
                  .andExpect(method(GET))
                  .andRespond(withSuccess("{\"passwordStatus\":", APPLICATION_JSON)); // broken JSON

        assertThatThrownBy(() ->
                service.retrieveCredentialsByUsername(headerMap, "ida", "identifierPartition", "credentialId"))
            .isInstanceOf(CoordinatorException.class);

        mockServer.verify();
    }
}
