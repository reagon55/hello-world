package com.lgi.cmsa.tests.services.voiceai;

import com.lgi.cmsa.clients.services.ServiceClientFactory;
import com.lgi.cmsa.common.model.plume.wifinetwork.WifiNetwork;
import com.lgi.cmsa.common.model.plume.wifinetwork.WifiNetworks;
import com.lgi.cmsa.exceptions.CustomProjectException;
import com.lgi.cmsa.wiremock.UserMocker;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.test.context.junit4.SpringRunner;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;

import java.util.List;

import static org.assertj.core.api.Assertions.assertThat;

@RunWith(SpringRunner.class)
public class VoiceAiWiFiNetworkResponseTest {

    @Autowired
    private ServiceClientFactory serviceClientFactory;

    @Mocks(required = {UserMocker.class})
    @Service(name = "voice-ai-service")
    public class VoiceAiWiFiNetworkServiceTest {

        @BeforeClass
        public void setUp() {
            // Initialization logic if any
        }

        @Test
        public void testGetHomeWiFiNetworks() {
            String accessToken = "validAccessToken";
            String opCo = "someOpCo";
            boolean withPassphrase = true;

            WifiNetworks wifiNetworks = serviceClientFactory.getWiFiClient().getWiFiNetworksOverview(accessToken, opCo, withPassphrase);

            assertThat(wifiNetworks).isNotNull();
            assertThat(wifiNetworks.getFirstNetworkByType(Network.HOME)).isNotNull();
        }

        @Test
        public void testGetGuestWiFiNetworks() {
            String accessToken = "validAccessToken";
            String opCo = "someOpCo";
            boolean withPassphrase = true;

            WifiNetworks wifiNetworks = serviceClientFactory.getWiFiClient().getWiFiNetworksOverview(accessToken, opCo, withPassphrase);

            assertThat(wifiNetworks).isNotNull();
            assertThat(wifiNetworks.getFirstNetworkByType(Network.GUEST)).isNotNull();
        }

        @Test
        public void testGetHomeWiFiNetworksWhenNoneExist() {
            String accessToken = "validAccessToken";
            String opCo = "someOpCo";
            boolean withPassphrase = true;

            WifiNetworks wifiNetworks = serviceClientFactory.getWiFiClient().getWiFiNetworksOverview(accessToken, opCo, withPassphrase);

            assertThat(wifiNetworks).isNotNull();
            assertThatThrownBy(() -> wifiNetworks.getFirstNetworkByType(Network.HOME))
                .isInstanceOf(CustomProjectException.class)
                .hasMessageContaining("No networks of type home");
        }

        @Test
        public void testGetGuestWiFiNetworksWhenNoneExist() {
            String accessToken = "validAccessToken";
            String opCo = "someOpCo";
            boolean withPassphrase = true;

            WifiNetworks wifiNetworks = serviceClientFactory.getWiFiClient().getWiFiNetworksOverview(accessToken, opCo, withPassphrase);

            assertThat(wifiNetworks).isNotNull();
            assertThatThrownBy(() -> wifiNetworks.getFirstNetworkByType(Network.GUEST))
                .isInstanceOf(CustomProjectException.class)
                .hasMessageContaining("No networks of type guest");
        }
    }
}
